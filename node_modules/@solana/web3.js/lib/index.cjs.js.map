{"version":3,"file":"index.cjs.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/timing.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/transaction.js","../src/sysvar.js","../src/fee-calculator.js","../src/nonce-account.js","../src/util/sleep.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/budget-program.js","../src/stake-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/testnet.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport hasha from 'hasha';\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // hexadecimal number\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if the provided object is a PublicKey\n   */\n  static isPublicKey(o: Object): boolean {\n    return o instanceof PublicKey;\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a programId.\n   */\n  static createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): PublicKey {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = hasha(buffer, {algorithm: 'sha256'});\n    return new PublicKey('0x' + hash);\n  }\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 10;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 8;\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst PUBKEY_LENGTH = 32;\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<{pubkey: PublicKey, isSigner: boolean, isWritable: boolean}>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<{\n    pubkey: PublicKey,\n    isSigner: boolean,\n    isWritable: boolean,\n  }> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property (?recentBlockhash} A recent block hash\n * @property (?signatures} One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {nonce} The current Nonce blockhash\n * @property {nonceInstruction} The AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentBlockhash: Blockhash | null;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: NonceInformation | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if (item instanceof TransactionInstruction) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _getSignData(): Buffer {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    const keys = this.signatures.map(({publicKey}) => publicKey.toString());\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    const programIds = [];\n\n    const allKeys = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(keySignerPair => {\n        allKeys.push(keySignerPair);\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    allKeys.sort(function(x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    allKeys.forEach(keySignerPair => {\n      const keyStr = keySignerPair.pubkey.toString();\n      if (!keys.includes(keyStr)) {\n        if (keySignerPair.isSigner) {\n          this.signatures.push({\n            signature: null,\n            publicKey: keySignerPair.pubkey,\n          });\n          if (!keySignerPair.isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          if (!keySignerPair.isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n        keys.push(keyStr);\n      }\n    });\n\n    programIds.forEach(programId => {\n      if (!keys.includes(programId)) {\n        keys.push(programId);\n        numReadonlyUnsignedAccounts += 1;\n      }\n    });\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, keys.length);\n\n    const instructions = this.instructions.map(instruction => {\n      const {data, programId} = instruction;\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, instruction.keys.length);\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, instruction.data.length);\n      return {\n        programIdIndex: keys.indexOf(programId.toString()),\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(\n          instruction.keys.map(keyObj =>\n            keys.indexOf(keyObj.pubkey.toString()),\n          ),\n        ),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), keys.length, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.signatures.length]),\n      numReadonlySignedAccounts: Buffer.from([numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: keys.map(key => new PublicKey(key).toBuffer()),\n      recentBlockhash: Buffer.from(bs58.decode(recentBlockhash)),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    signData = signData.slice(0, length + instructionBuffer.length);\n\n    return signData;\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `Account`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PublicKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `Account`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PublicKey | Account>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => {\n        const publicKey =\n          accountOrPublicKey instanceof Account\n            ? accountOrPublicKey.publicKey\n            : accountOrPublicKey;\n        return {\n          signature: null,\n          publicKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._getSignData();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      if (accountOrPublicKey instanceof PublicKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPublicKey.secretKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = Buffer.from(signature);\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `Account` for a `PublicKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: Account) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.publicKey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.publicKey.toString()}`);\n    }\n\n    const signData = this._getSignData();\n    const signature = nacl.sign.detached(signData, signer.secretKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    let verified = true;\n    const signData = this._getSignData();\n    for (const {signature, publicKey} of this.signatures) {\n      if (\n        !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n      ) {\n        verified = false;\n      }\n    }\n    return verified;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._getSignData();\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    const numRequiredSignatures = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numRequiredSignatures byte\n    const numReadonlySignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numReadonlySignedAccounts byte\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numReadonlyUnsignedAccounts byte\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accounts = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accounts.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    return Transaction._populate(\n      signatures,\n      accounts,\n      instructions,\n      recentBlockhash,\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    );\n  }\n\n  /**\n   * Parse an RPC result into a Transaction object.\n   */\n  static fromRpcResult(rpcResult: any): Transaction {\n    const signatures = rpcResult.signatures;\n    const accounts = rpcResult.message.accountKeys;\n    const instructions = rpcResult.message.instructions;\n    const recentBlockhash = rpcResult.message.recentBlockhash;\n    const numRequiredSignatures =\n      rpcResult.message.header.numRequiredSignatures;\n    const numReadonlySignedAccounts =\n      rpcResult.message.header.numReadonlySignedAccounts;\n    const numReadonlyUnsignedAccounts =\n      rpcResult.message.header.numReadonlyUnsignedAccounts;\n    return Transaction._populate(\n      signatures,\n      accounts,\n      instructions,\n      recentBlockhash,\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    );\n  }\n\n  /**\n   * Populate Transaction object\n   * @private\n   */\n  static _populate(\n    signatures: Array<string>,\n    accounts: Array<string>,\n    instructions: Array<any>,\n    recentBlockhash: Array<number>,\n    numRequiredSignatures: number,\n    numReadonlySignedAccounts: number,\n    numReadonlyUnsignedAccounts: number,\n  ): Transaction {\n    function isWritable(\n      i: number,\n      numRequiredSignatures: number,\n      numReadonlySignedAccounts: number,\n      numReadonlyUnsignedAccounts: number,\n      numKeys: number,\n    ): boolean {\n      return (\n        i < numRequiredSignatures - numReadonlySignedAccounts ||\n        (i >= numRequiredSignatures &&\n          i < numKeys - numReadonlyUnsignedAccounts)\n      );\n    }\n\n    const transaction = new Transaction();\n    transaction.recentBlockhash = new PublicKey(recentBlockhash).toBase58();\n    for (let i = 0; i < signatures.length; i++) {\n      const sigPubkeyPair = {\n        signature:\n          signatures[i] == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signatures[i]),\n        publicKey: new PublicKey(accounts[i]),\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      let instructionData = {\n        keys: [],\n        programId: new PublicKey(accounts[instructions[i].programIndex]),\n        data: bs58.decode(instructions[i].data),\n      };\n      for (let j = 0; j < instructions[i].accounts.length; j++) {\n        const pubkey = new PublicKey(accounts[instructions[i].accounts[j]]);\n\n        instructionData.keys.push({\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: isWritable(\n            j,\n            numRequiredSignatures,\n            numReadonlySignedAccounts,\n            numReadonlyUnsignedAccounts,\n            accounts.length,\n          ),\n        });\n      }\n      let instruction = new TransactionInstruction(instructionData);\n      transaction.instructions.push(instruction);\n    }\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer: Buffer): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(buffer, 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction} from './transaction';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {{slot: number}} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: {\n    slot: number,\n  },\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * The level of commitment desired when querying state\n *   'max':    Query the most recent block which has reached max voter lockout\n *   'recent': Query the most recent block\n *\n * @typedef {'max' | 'recent'} Commitment\n */\nexport type Commitment = 'max' | 'recent';\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string} gossip Gossip network address for the node\n * @property {string} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string,\n  tpu: string | null,\n  rpc: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation parameters\n * (see https://docs.solana.com/book/v/master/implemented-proposals/ed_overview)\n *\n * @typedef {Object} Inflation\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} storage\n * @property {number} taper\n * @property {number} terminal\n */\nconst GetInflationResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  storage: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * EpochInfo parameters\n * (see https://docs.solana.com/book/v/master/terminology#epoch)\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n */\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n});\n\n/**\n * EpochSchedule parameters\n * (see https://docs.solana.com/book/v/master/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slots_per_epoch\n * @property {number} leader_schedule_slot_offset\n * @property {boolean} warmup\n * @property {number} first_normal_epoch\n * @property {number} first_normal_slot\n */\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct.union([\n  struct({Ok: 'null'}),\n  struct({Err: 'object'}),\n]);\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct({\n  'solana-core': 'string',\n});\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: {\n      fee: number,\n      preBalances: Array<number>,\n      postBalances: Array<number>,\n      status?: SignatureStatusResult,\n    },\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n  }>,\n};\n\nfunction createRpcRequest(url): RpcRequest {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflation\" message\n */\nconst GetInflationRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'string',\n  rentEpoch: 'number?',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: ProgramAccountInfoResult,\n});\n\n/**\n * @private\n */\nconst SlotInfo = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfo,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: SignatureStatusResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"confirmTransaction\" message\n */\nconst ConfirmTransactionAndContextRpcResult = jsonRpcResultAndContext(\n  'boolean',\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct({\n      pubkey: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatus\" message\n */\nconst GetSignatureStatusRpcResult = jsonRpcResult(\n  struct.union(['null', SignatureStatusResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: struct({\n            signatures: struct.array(['string']),\n            message: struct({\n              accountKeys: struct.array(['string']),\n              header: struct({\n                numRequiredSignatures: 'number',\n                numReadonlySignedAccounts: 'number',\n                numReadonlyUnsignedAccounts: 'number',\n              }),\n              instructions: struct.array([\n                struct.union([\n                  struct.array(['number']),\n                  struct({\n                    accounts: struct.array(['number']),\n                    data: 'string',\n                    programIdIndex: 'number',\n                  }),\n                ]),\n              ]),\n              recentBlockhash: 'string',\n            }),\n          }),\n          meta: struct.union([\n            'null',\n            struct({\n              status: struct.union(['null', SignatureStatusResult]),\n              fee: 'number',\n              preBalances: struct.array(['number']),\n              postBalances: struct.array(['number']),\n            }),\n          ]),\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {?Buffer} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: Buffer,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (accountInfo: AccountInfo) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureStatusResult,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature status: Success\n *\n * @typedef {Object} SignatureSuccess\n */\nexport type SignatureSuccess = {|\n  Ok: null,\n|};\n\n/**\n * Signature status: TransactionError\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {|\n  Err: Object,\n|};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._argsWithCommitment([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo>> {\n    const args = this._argsWithCommitment([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n\n    if (!res.result.value) {\n      throw new Error('Invalid request');\n    }\n\n    const {executable, owner, lamports, data} = res.result.value;\n    const value = {\n      executable,\n      owner: new PublicKey(owner),\n      lamports,\n      data: bs58.decode(data),\n    };\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo}>> {\n    const args = this._argsWithCommitment([programId.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      return {\n        pubkey: result.pubkey,\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: bs58.decode(result.account.data),\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature, return with context\n   */\n  async confirmTransactionAndContext(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const args = this._argsWithCommitment([signature], commitment);\n    const unsafeRes = await this._rpcRequest('confirmTransaction', args);\n    const res = ConfirmTransactionAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<boolean> {\n    return await this.confirmTransactionAndContext(signature, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<SignatureSuccess | TransactionError | null> {\n    const args = this._argsWithCommitment([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getSignatureStatus', args);\n    const res = GetSignatureStatusRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster Inflation parameters\n   */\n  async getInflation(commitment: ?Commitment): Promise<GetInflationRpcResult> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflation', args);\n    const res = GetInflationRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<GetEpochInfoRpcResult> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<GetEpochScheduleRpcResult> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._argsWithCommitment([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const result = GetConfirmedBlockRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(result.error.message);\n    }\n    assert(typeof result.result !== 'undefined');\n    if (!result.result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.result.blockhash).toString(),\n      previousBlockhash: new PublicKey(\n        result.result.previousBlockhash,\n      ).toString(),\n      parentSlot: result.result.parentSlot,\n      transactions: result.result.transactions.map(result => {\n        return {\n          transaction: Transaction.fromRpcResult(result.transaction),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount>> {\n    const args = this._argsWithCommitment(\n      [nonceAccount.toBase58()],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    if (!res.result.value) {\n      throw new Error('Invalid request');\n    }\n\n    const value = NonceAccount.fromAccountData(\n      bs58.decode(res.result.value.data),\n    );\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n    commitment: ?Commitment,\n  ): Promise<TransactionSignature> {\n    const args = this._argsWithCommitment([to.toBase58(), amount], commitment);\n    const unsafeRes = await this._rpcRequest('requestAirdrop', args);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    ...signers: Array<Account>\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      for (;;) {\n        // Attempt to use a recent blockhash for up to 30 seconds\n        const seconds = new Date().getSeconds();\n        if (\n          this._blockhashInfo.recentBlockhash != null &&\n          this._blockhashInfo.seconds < seconds + 30\n        ) {\n          transaction.recentBlockhash = this._blockhashInfo.recentBlockhash;\n          transaction.sign(...signers);\n          if (!transaction.signature) {\n            throw new Error('!signature'); // should never happen\n          }\n\n          // If the signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done.\n          const signature = transaction.signature.toString();\n          if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n            this._blockhashInfo.transactionSignatures.push(signature);\n            if (this._disableBlockhashCaching) {\n              this._blockhashInfo.seconds = -1;\n            }\n            break;\n          }\n        }\n\n        // Fetch a new blockhash\n        let attempts = 0;\n        const startTime = Date.now();\n        for (;;) {\n          const {blockhash} = await this.getRecentBlockhash();\n\n          if (this._blockhashInfo.recentBlockhash != blockhash) {\n            this._blockhashInfo = {\n              recentBlockhash: blockhash,\n              seconds: new Date().getSeconds(),\n              transactionSignatures: [],\n            };\n            break;\n          }\n          if (attempts === 50) {\n            throw new Error(\n              `Unable to obtain a new blockhash after ${Date.now() -\n                startTime}ms`,\n            );\n          }\n\n          // Sleep for approximately half a slot\n          await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n\n          ++attempts;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = bs58.encode(toBuffer(rawTransaction));\n    const result = await this.sendEncodedTransaction(encodedTransaction);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base58 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('sendTransaction', [\n      encodedTransaction,\n    ]);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    // 1000 means _rpcWebSocket.close() was called explicitly\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    } else {\n      // Only after an explicit close do we need to explicitly connect again\n      this._rpcWebSocketConnected = false;\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.log(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0\n    ) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      for (let id of accountKeys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of programKeys) {\n        this._programAccountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of slotKeys) {\n        this._slotSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of signatureKeys) {\n        this._signatureSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(sub, 'accountSubscribe', [sub.publicKey]);\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(sub, 'programSubscribe', [sub.programId]);\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(sub, 'signatureSubscribe', [sub.signature]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          owner: new PublicKey(result.owner),\n          lamports: result.lamports,\n          data: bs58.decode(result.data),\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publickey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          accountId: result.pubkey,\n          accountInfo: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: bs58.decode(result.account.data),\n          },\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _argsWithCommitment(args: Array<any>, override: ?Commitment): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment) {\n      args.push({commitment});\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport type {Commitment} from '../connection';\nimport {Transaction} from '../transaction';\nimport {sleep} from './sleep';\nimport type {Account} from '../account';\nimport type {TransactionSignature} from '../transaction';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * Sign, send and confirm a transaction with recent commitment level\n */\nexport async function sendAndConfirmRecentTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return await _sendAndConfirmTransaction(\n    connection,\n    transaction,\n    signers,\n    'recent',\n  );\n}\n\n/**\n * Sign, send and confirm a transaction\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return await _sendAndConfirmTransaction(connection, transaction, signers);\n}\n\nasync function _sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  commitment: ?Commitment,\n): Promise<TransactionSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTransaction(transaction, ...signers);\n\n    // Wait up to a couple slots for a confirmation\n    let status = null;\n    let statusRetries = 6;\n    for (;;) {\n      status = await connection.getSignatureStatus(signature, commitment);\n      if (status) {\n        break;\n      }\n\n      if (--statusRetries <= 0) {\n        break;\n      }\n      // Sleep for approximately half a slot\n      await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n    }\n\n    if (status && 'Ok' in status) {\n      break;\n    }\n    if (--sendRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n\n    if (status && status.Err && !('AccountInUse' in status.Err)) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n\n    // Retry in 0..100ms to try to avoid another AccountInUse collision\n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  fromPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length !== expectedLength) {\n      throw new Error(\n        `invalid instruction; key length mismatch ${keys.length} != ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that transfers lamports from one account to another\n   */\n  static transfer(params: TransferParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(params: AssignParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n    const data = encodeData(type, {programId: params.programId.toBuffer()});\n\n    return new Transaction().add({\n      keys: [{pubkey: params.fromPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params: CreateNonceAccountParams): Transaction {\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.noncePubkey,\n      lamports: params.lamports,\n      space: NONCE_ACCOUNT_LENGTH,\n      programId: this.programId,\n    });\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Math.ceil(dataLength / Loader.chunkSize);\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<PublicKey> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n      const transaction = SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: program.publicKey,\n        lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n        space: data.length,\n        programId,\n      });\n      await sendAndConfirmTransaction(connection, transaction, payer, program);\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, payer, program),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same program account\n      await sleep(1000 / NUM_TICKS_PER_SECOND);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(connection, transaction, payer, program);\n    }\n    return program.publicKey;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Public key that identifies the BpfLoader\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('BPFLoader1111111111111111111111111111111111');\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the program into\n   * @param elfBytes The entire ELF containing the BPF program\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n  ): Promise<PublicKey> {\n    const program = new Account();\n    return Loader.load(connection, payer, program, BpfLoader.programId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\n\n/**\n * Represents a condition that is met by executing a `applySignature()`\n * transaction\n *\n * @typedef {Object} SignatureCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applySignature()` will be accepted from\n */\nexport type SignatureCondition = {\n  type: 'signature',\n  from: PublicKey,\n};\n\n/**\n * Represents a condition that is met by executing a `applyTimestamp()`\n * transaction\n *\n * @typedef {Object} TimestampCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applyTimestamp()` will be accepted from\n * @property {Date} when The timestamp that was observed\n */\nexport type TimestampCondition = {\n  type: 'timestamp',\n  from: PublicKey,\n  when: Date,\n};\n\n/**\n * Represents a payment to a given public key\n *\n * @typedef {Object} Payment\n * @property {number} amount Number of lamports\n * @property {PublicKey} to Public key of the recipient\n */\nexport type Payment = {\n  amount: number,\n  to: PublicKey,\n};\n\n/**\n * A condition that can unlock a payment\n *\n * @typedef {SignatureCondition|TimestampCondition} BudgetCondition\n */\nexport type BudgetCondition = SignatureCondition | TimestampCondition;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const data = Buffer.alloc(8 + toData.length);\n  data.writeUInt32LE(payment.amount, 0);\n  toData.copy(data, 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeDate(when: Date): Buffer {\n  const data = Buffer.alloc(8 + 20);\n  data.writeUInt32LE(20, 0); // size of timestamp as u64\n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  data.write(iso(when), 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeCondition(condition: BudgetCondition) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeDate(condition.when);\n      const from = condition.from.toBuffer();\n\n      const data = Buffer.alloc(4 + date.length + from.length);\n      data.writeUInt32LE(0, 0); // Condition enum = Timestamp\n      date.copy(data, 4);\n      from.copy(data, 4 + date.length);\n      return data;\n    }\n    case 'signature': {\n      const from = condition.from.toBuffer();\n      const data = Buffer.alloc(4 + from.length);\n      data.writeUInt32LE(1, 0); // Condition enum = Signature\n      from.copy(data, 4);\n      return data;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * Factory class for transactions to interact with the Budget program\n */\nexport class BudgetProgram {\n  /**\n   * Public key that identifies the Budget program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Budget1111111111111111111111111111111111111');\n  }\n\n  /**\n   * The amount of space this program requires\n   */\n  static get space(): number {\n    return 128;\n  }\n\n  /**\n   * Creates a timestamp condition\n   */\n  static timestampCondition(from: PublicKey, when: Date): TimestampCondition {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * Creates a signature condition\n   */\n  static signatureCondition(from: PublicKey): SignatureCondition {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once any of the conditions are met\n   */\n  static pay(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    ...conditions: Array<BudgetCondition>\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    switch (conditions.length) {\n      case 0: {\n        data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(data, pos);\n          pos += payment.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount({\n          fromPubkey: from,\n          newAccountPubkey: program,\n          lamports: amount,\n          space: trimmedData.length,\n          programId: this.programId,\n        });\n\n        return transaction.add({\n          keys: [\n            {pubkey: to, isSigner: false, isWritable: true},\n            {pubkey: program, isSigner: false, isWritable: true},\n          ],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n      case 1: {\n        data.writeUInt32LE(1, pos); // BudgetExpr enum = After\n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount({\n          fromPubkey: from,\n          newAccountPubkey: program,\n          lamports: amount,\n          space: trimmedData.length,\n          programId: this.programId,\n        });\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isWritable: true}],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n\n      case 2: {\n        data.writeUInt32LE(2, pos); // BudgetExpr enum = Or\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount({\n          fromPubkey: from,\n          newAccountPubkey: program,\n          lamports: amount,\n          space: trimmedData.length,\n          programId: this.programId,\n        });\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isWritable: true}],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are supported: ${conditions.length} provided`,\n        );\n    }\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once both conditions are met\n   */\n  static payOnBoth(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    condition1: BudgetCondition,\n    condition2: BudgetCondition,\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    data.writeUInt32LE(3, pos); // BudgetExpr enum = And\n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCondition(condition);\n      conditionData.copy(data, pos);\n      pos += conditionData.length;\n    }\n\n    data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n    pos += 4;\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(data, pos);\n    pos += paymentData.length;\n\n    const trimmedData = data.slice(0, pos);\n\n    const transaction = SystemProgram.createAccount({\n      fromPubkey: from,\n      newAccountPubkey: program,\n      lamports: amount,\n      space: trimmedData.length,\n      programId: this.programId,\n    });\n\n    return transaction.add({\n      keys: [{pubkey: program, isSigner: false, isWritable: true}],\n      programId: this.programId,\n      data: trimmedData,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a timestamp, which could enable a\n   * pending payment to proceed.\n   */\n  static applyTimestamp(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeDate(when);\n    const data = Buffer.alloc(4 + whenData.length);\n\n    data.writeUInt32LE(1, 0); // ApplyTimestamp instruction\n    whenData.copy(data, 4);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: program, isSigner: false, isWritable: true},\n        {pubkey: to, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a signature, which could enable a\n   * pending payment to proceed.\n   */\n  static applySignature(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // ApplySignature instruction\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: program, isSigner: false, isWritable: true},\n        {pubkey: to, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length !== expectedLength) {\n      throw new Error(\n        `invalid instruction; key length mismatch ${keys.length} != ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   */\n  static get space(): number {\n    return 4008;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    let transaction = SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId,\n    });\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId,\n    });\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: stakePubkey,\n      newAccountPubkey: splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId,\n    });\n    transaction.instructions[0].keys[0].isSigner = false;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: toPubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {Commitment} from '../connection';\nimport {sleep} from './sleep';\nimport type {TransactionSignature} from '../transaction';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * Sign, send and confirm a raw transaction\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  commitment: ?Commitment,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  let signature = await connection.sendRawTransaction(rawTransaction);\n\n  // Wait up to a couple slots for a confirmation\n  let status = null;\n  let statusRetries = 6;\n  for (;;) {\n    status = await connection.getSignatureStatus(signature, commitment);\n    if (status) {\n      break;\n    }\n\n    // Sleep for approximately half a slot\n    await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n  }\n\n  if (status && 'Ok' in status) {\n    return signature;\n  }\n\n  throw new Error(\n    `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n  );\n}\n","//@flow\n\nimport {testnetDefaultChannel} from '../../package.json';\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    edge: 'http://edge.devnet.solana.com:8899',\n    beta: 'http://beta.devnet.solana.com:8899',\n    stable: 'http://devnet.solana.com:8899',\n  },\n  https: {\n    edge: 'https://edge.devnet.solana.com:8443',\n    beta: 'https://beta.devnet.solana.com:8443',\n    stable: 'https://devnet.solana.com:8443',\n  },\n};\n\n/**\n * Retrieves the RPC endpoint URL for the specified testnet release\n * channel\n */\nexport function testnetChannelEndpoint(\n  channel?: string,\n  tls?: boolean,\n): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!channel) {\n    return endpoint[key][testnetDefaultChannel];\n  }\n\n  const url = endpoint[key][channel];\n  if (!url) {\n    throw new Error(`Unknown ${key} channel: ${channel}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BpfLoader} from './bpf-loader';\nexport {BudgetProgram} from './budget-program';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {NonceAccount} from './nonce-account';\nexport {PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {SystemInstruction, SystemProgram} from './system-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nexport {\n  sendAndConfirmTransaction,\n  sendAndConfirmRecentTransaction,\n} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {testnetChannelEndpoint} from './util/testnet';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","PublicKey","value","startsWith","_bn","BN","substring","decoded","bs58","decode","length","Error","publicKey","eq","encode","b","toArrayLike","zeroPad","alloc","copy","toBase58","o","fromPublicKey","seed","programId","concat","hash","hasha","algorithm","Account","secretKey","_keypair","nacl","sign","keyPair","fromSecretKey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","toString","str","span","authorized","lockup","getAlloc","type","fields","layout","forEach","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","DEFAULT_SIGNATURE","fill","PACKET_DATA_SIZE","PUBKEY_LENGTH","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signatures","signature","items","instructions","nonceInfo","nonceInstruction","recentBlockhash","nonce","unshift","keys","map","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","programIds","allKeys","instruction","keySignerPair","includes","sort","x","y","checkSigner","isSigner","checkWritable","isWritable","keyStr","pubkey","keyCount","shortvec","keyIndicesCount","dataCount","programIdIndex","indexOf","keyIndices","keyObj","dataLength","invariant","keyIndex","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","numRequiredSignatures","key","signData","signPartial","partialSigners","accountOrPublicKey","_getSignData","index","detached","signer","findIndex","sigpair","equals","verified","verify","signatureCount","transactionLength","wireTransaction","byteArray","i","accountCount","accounts","account","programIndex","_populate","rpcResult","message","accountKeys","header","numKeys","sigPubkeyPair","instructionData","j","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","nonceAccount","authorizedPubkey","sleep","ms","Promise","resolve","setTimeout","jsonRpcResultAndContext","resultDescription","jsonRpcResult","context","struct","slot","jsonRpcVersion","literal","union","jsonrpc","id","error","result","GetInflationResult","foundation","foundationTerm","initial","storage","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","SignatureStatusResult","Ok","Err","Version","createRpcRequest","url","server","jayson","request","callback","options","method","body","headers","fetch","res","text","args","reject","err","response","GetInflationRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetBalanceAndContextRpcResult","GetVersionRpcResult","AccountInfoResult","executable","owner","lamports","rentEpoch","GetAccountInfoAndContextRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfo","parent","root","SlotNotificationResult","SignatureNotificationResult","GetProgramAccountsRpcResult","array","ConfirmTransactionAndContextRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","tuple","commission","lastVote","rootSlot","delinquent","GetSignatureStatusRpcResult","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","meta","status","fee","preBalances","postBalances","rewards","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","urlParse","_rpcRequest","href","_commitment","_blockhashInfo","seconds","transactionSignatures","protocol","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_argsWithCommitment","unsafeRes","assert","getBalanceAndContext","then","e","getAccountInfoAndContext","confirmTransactionAndContext","console","warn","getRecentBlockhashAndContext","fromRpcResult","fromAccountData","getNonceAndContext","to","amount","signers","Date","getSeconds","_disableBlockhashCaching","attempts","startTime","now","getRecentBlockhash","serialize","sendRawTransaction","rawTransaction","encodedTransaction","sendEncodedTransaction","_rpcWebSocketConnected","_updateSubscriptions","log","code","sub","rpcMethod","rpcArgs","subscriptionId","call","unsubscribeId","_accountChangeSubscriptions","programKeys","_programAccountChangeSubscriptions","slotKeys","_slotSubscriptions","signatureKeys","_signatureSubscriptions","close","connect","_subscribe","notification","_accountChangeSubscriptionCounter","subInfo","_unsubscribe","accountId","accountInfo","_programAccountChangeSubscriptionCounter","_slotSubscriptionCounter","override","_signatureSubscriptionCounter","sendAndConfirmRecentTransaction","connection","_sendAndConfirmTransaction","sendAndConfirmTransaction","sendRetries","start","sendTransaction","statusRetries","getSignatureStatus","duration","toFixed","JSON","stringify","Math","random","undefined","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","t","checkKeyLength","Create","space","fromPubkey","newAccountPubkey","Transfer","toPubkey","Assign","CreateWithSeed","base","basePubkey","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","params","add","createAccount","initParams","nonceInitialize","Loader","ceil","chunkSize","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","dataLayout","all","BpfLoader","getMinNumSignatures","elf","load","serializePayment","payment","toData","writeUInt32LE","serializeDate","when","iso","date","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","write","serializeCondition","condition","BudgetProgram","pos","conditions","trimmedData","conditionData","paymentData","condition1","condition2","whenData","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","Split","splitStakePubkey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","createAccountWithSeed","initialize","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","http","edge","beta","stable","https","testnetChannelEndpoint","channel","tls","testnetDefaultChannel","LAMPORTS_PER_SOL"],"mappings":"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"}